syntax = "proto3";

package glass;

service looking_glass {

    // origin will return the origin AS number
    rpc origin(origin_request) returns (origin_response);

    // aspath will return the aspath.
    rpc aspath(aspath_request) returns (aspath_response);

    // route will return the full ip route output.
    rpc route(route_request) returns (route_response);

    // asname will return the AS name.
    rpc asname(asname_request) returns (asname_response);

    // roa will return the roa status.
    rpc roa(roa_request) returns (roa_response);

    // sourced will return all the IPv4 and IPv6 prefixes sources by an AS number
    rpc sourced(source_request) returns (source_response);

    // totals will return the current IPv4 and IPv6 BGP count.
    rpc totals(empty) returns (total_response);

    // Total number of ASNs
    rpc total_asns(empty) returns (total_asns_response);

    // location will return the city, country, and lat/long co-ordinates of an airport.
    rpc location(location_request) returns (location_response);

    // map will return a google maps image for the airport location specified.
    rpc map(map_request) returns (map_response);

    // invalids will return a list of ASNs originating invalid prefixes, plus a list of prefixes actually originated
    rpc invalids(empty) returns (invalid_response);

}

message ip_address {
    // An address is made up of a string prefix and a int mask. Both IPv4 and IPv6.
    string address = 1;
    uint32 mask = 2;
}

message origin_request {
    ip_address ip_address = 1;
}

message origin_response {
    // origin_response shows the current origin ASN for active route.
    uint32 origin_asn = 1;
    bool exists = 2;
}

message source_request {
    uint32 as_number = 1;
}

message source_response {
    repeated ip_address ip_address = 1;
    bool exists = 2;
    uint32 v4count = 3;
    uint32 v6count = 4;
}

message empty {
    // empty struct
}

message total_response {
    uint32 active_4 = 2;
    uint32 active_6 = 4;
    uint64 time = 5;
}

message aspath_request {
    ip_address ip_address = 1;
}

message aspath_response {
    // aspath_response shows the current aspath for the active route.
    repeated asn asn = 1;
    repeated asn set = 2;
    bool exists = 3;
}

message asn {
    uint32 asplain = 1;
    string asdot = 2;
}

message route_request {
    ip_address ip_address = 1;
}

message route_response {
    // route_response shows the current prefix/mask for the active route.
    ip_address ip_address = 1;
    bool exists = 2;
}

message asname_request {
    uint32 as_number = 1;
}

message asname_response {
    // asname_response returns the string name for the passed AS number.
    string as_name = 1;
    bool exists = 2;
    string locale = 3;
}

message total_transit_request {
    uint32 as_number = 1;
}

message total_transit_response {
    uint32 total = 1;
}

message total_asns_response {

    // Total ASNs sourcing IPv4
    uint32 as4 = 2;

    // Total ASNs sourcing IPv6
    uint32 as6 = 3;

    // Total ASNs sourcing either IPv4, IPv6, or both
    uint32 as10 = 4;

    // Total ASNs sourcing only IPv4
    uint32 as4_only = 5;

    // Total ASNs sourcing only IPv6
    uint32 as6_only = 6;

    // Total ASNs sourcing both IPv4 and IPv6
    uint32 as_both = 1;
}

message roa_request {
    ip_address ip_address = 1;
}

message roa_response {
    enum ROAStatus {
        UNKNOWN = 0;
        VALID = 1;
        INVALID = 2;
    }
    ip_address ip_address = 1;
    ROAStatus status = 2;
    bool exists = 3;

}

message location_request {
    string airport = 1;
}

message location_response {
    string city = 1;
    string country = 2;
    string lat = 3;
    string long = 4;
}

message map_request {
    string lat = 1;
    string long = 2;
}

message map_response {
    string image = 1;
}

message invalid_response {
    repeated invalid_originator asn = 1;
}

message invalid_originator {
    string asn = 1;
    repeated string ip = 2;
}