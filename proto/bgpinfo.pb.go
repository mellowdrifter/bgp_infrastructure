// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bgpinfo.proto

package bgpinfo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddressFamily int32

const (
	AddressFamily_UNKNOWN AddressFamily = 0
	AddressFamily_IPV6    AddressFamily = 1
	AddressFamily_IPV4    AddressFamily = 2
)

var AddressFamily_name = map[int32]string{
	0: "UNKNOWN",
	1: "IPV6",
	2: "IPV4",
}
var AddressFamily_value = map[string]int32{
	"UNKNOWN": 0,
	"IPV6":    1,
	"IPV4":    2,
}

func (x AddressFamily) String() string {
	return proto.EnumName(AddressFamily_name, int32(x))
}
func (AddressFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{0}
}

type Values struct {
	Time        int64        `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	PrefixCount *PrefixCount `protobuf:"bytes,2,opt,name=prefix_count,json=prefixCount,proto3" json:"prefix_count,omitempty"`
	Peers       []*PeerCount `protobuf:"bytes,3,rep,name=peers,proto3" json:"peers,omitempty"`
	// Any single line used for tweet info is marked
	Tweet                bool      `protobuf:"varint,4,opt,name=tweet,proto3" json:"tweet,omitempty"`
	MemUse               []*Memory `protobuf:"bytes,5,rep,name=mem_use,json=memUse,proto3" json:"mem_use,omitempty"`
	AsCount              *AsCount  `protobuf:"bytes,6,opt,name=as_count,json=asCount,proto3" json:"as_count,omitempty"`
	Masks                []*Mask   `protobuf:"bytes,7,rep,name=masks,proto3" json:"masks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Values) Reset()         { *m = Values{} }
func (m *Values) String() string { return proto.CompactTextString(m) }
func (*Values) ProtoMessage()    {}
func (*Values) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{0}
}
func (m *Values) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Values.Unmarshal(m, b)
}
func (m *Values) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Values.Marshal(b, m, deterministic)
}
func (dst *Values) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Values.Merge(dst, src)
}
func (m *Values) XXX_Size() int {
	return xxx_messageInfo_Values.Size(m)
}
func (m *Values) XXX_DiscardUnknown() {
	xxx_messageInfo_Values.DiscardUnknown(m)
}

var xxx_messageInfo_Values proto.InternalMessageInfo

func (m *Values) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Values) GetPrefixCount() *PrefixCount {
	if m != nil {
		return m.PrefixCount
	}
	return nil
}

func (m *Values) GetPeers() []*PeerCount {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *Values) GetTweet() bool {
	if m != nil {
		return m.Tweet
	}
	return false
}

func (m *Values) GetMemUse() []*Memory {
	if m != nil {
		return m.MemUse
	}
	return nil
}

func (m *Values) GetAsCount() *AsCount {
	if m != nil {
		return m.AsCount
	}
	return nil
}

func (m *Values) GetMasks() []*Mask {
	if m != nil {
		return m.Masks
	}
	return nil
}

type Result struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{1}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// as_count will hold the total amount of unique ASs
type AsCount struct {
	As4Len               int32    `protobuf:"varint,1,opt,name=as4_len,json=as4Len,proto3" json:"as4_len,omitempty"`
	As6Len               int32    `protobuf:"varint,2,opt,name=as6_len,json=as6Len,proto3" json:"as6_len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AsCount) Reset()         { *m = AsCount{} }
func (m *AsCount) String() string { return proto.CompactTextString(m) }
func (*AsCount) ProtoMessage()    {}
func (*AsCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{2}
}
func (m *AsCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AsCount.Unmarshal(m, b)
}
func (m *AsCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AsCount.Marshal(b, m, deterministic)
}
func (dst *AsCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AsCount.Merge(dst, src)
}
func (m *AsCount) XXX_Size() int {
	return xxx_messageInfo_AsCount.Size(m)
}
func (m *AsCount) XXX_DiscardUnknown() {
	xxx_messageInfo_AsCount.DiscardUnknown(m)
}

var xxx_messageInfo_AsCount proto.InternalMessageInfo

func (m *AsCount) GetAs4Len() int32 {
	if m != nil {
		return m.As4Len
	}
	return 0
}

func (m *AsCount) GetAs6Len() int32 {
	if m != nil {
		return m.As6Len
	}
	return 0
}

// total memory used by the daemon
type Memory struct {
	Family               AddressFamily `protobuf:"varint,1,opt,name=family,proto3,enum=bgpinfo.AddressFamily" json:"family,omitempty"`
	Tables               string        `protobuf:"bytes,2,opt,name=tables,proto3" json:"tables,omitempty"`
	Total                string        `protobuf:"bytes,3,opt,name=total,proto3" json:"total,omitempty"`
	Protocols            string        `protobuf:"bytes,4,opt,name=protocols,proto3" json:"protocols,omitempty"`
	Attributes           string        `protobuf:"bytes,5,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Roa                  string        `protobuf:"bytes,6,opt,name=roa,proto3" json:"roa,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Memory) Reset()         { *m = Memory{} }
func (m *Memory) String() string { return proto.CompactTextString(m) }
func (*Memory) ProtoMessage()    {}
func (*Memory) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{3}
}
func (m *Memory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Memory.Unmarshal(m, b)
}
func (m *Memory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Memory.Marshal(b, m, deterministic)
}
func (dst *Memory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Memory.Merge(dst, src)
}
func (m *Memory) XXX_Size() int {
	return xxx_messageInfo_Memory.Size(m)
}
func (m *Memory) XXX_DiscardUnknown() {
	xxx_messageInfo_Memory.DiscardUnknown(m)
}

var xxx_messageInfo_Memory proto.InternalMessageInfo

func (m *Memory) GetFamily() AddressFamily {
	if m != nil {
		return m.Family
	}
	return AddressFamily_UNKNOWN
}

func (m *Memory) GetTables() string {
	if m != nil {
		return m.Tables
	}
	return ""
}

func (m *Memory) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *Memory) GetProtocols() string {
	if m != nil {
		return m.Protocols
	}
	return ""
}

func (m *Memory) GetAttributes() string {
	if m != nil {
		return m.Attributes
	}
	return ""
}

func (m *Memory) GetRoa() string {
	if m != nil {
		return m.Roa
	}
	return ""
}

// how many peers do I have
type PeerCount struct {
	Family               AddressFamily `protobuf:"varint,1,opt,name=family,proto3,enum=bgpinfo.AddressFamily" json:"family,omitempty"`
	Configured           int32         `protobuf:"varint,2,opt,name=configured,proto3" json:"configured,omitempty"`
	Up                   int32         `protobuf:"varint,3,opt,name=up,proto3" json:"up,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PeerCount) Reset()         { *m = PeerCount{} }
func (m *PeerCount) String() string { return proto.CompactTextString(m) }
func (*PeerCount) ProtoMessage()    {}
func (*PeerCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{4}
}
func (m *PeerCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerCount.Unmarshal(m, b)
}
func (m *PeerCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerCount.Marshal(b, m, deterministic)
}
func (dst *PeerCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerCount.Merge(dst, src)
}
func (m *PeerCount) XXX_Size() int {
	return xxx_messageInfo_PeerCount.Size(m)
}
func (m *PeerCount) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerCount.DiscardUnknown(m)
}

var xxx_messageInfo_PeerCount proto.InternalMessageInfo

func (m *PeerCount) GetFamily() AddressFamily {
	if m != nil {
		return m.Family
	}
	return AddressFamily_UNKNOWN
}

func (m *PeerCount) GetConfigured() int32 {
	if m != nil {
		return m.Configured
	}
	return 0
}

func (m *PeerCount) GetUp() int32 {
	if m != nil {
		return m.Up
	}
	return 0
}

// prefix counts. Most used info
type PrefixCount struct {
	Family               AddressFamily `protobuf:"varint,1,opt,name=family,proto3,enum=bgpinfo.AddressFamily" json:"family,omitempty"`
	Total                int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Active               int32         `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PrefixCount) Reset()         { *m = PrefixCount{} }
func (m *PrefixCount) String() string { return proto.CompactTextString(m) }
func (*PrefixCount) ProtoMessage()    {}
func (*PrefixCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{5}
}
func (m *PrefixCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrefixCount.Unmarshal(m, b)
}
func (m *PrefixCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrefixCount.Marshal(b, m, deterministic)
}
func (dst *PrefixCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrefixCount.Merge(dst, src)
}
func (m *PrefixCount) XXX_Size() int {
	return xxx_messageInfo_PrefixCount.Size(m)
}
func (m *PrefixCount) XXX_DiscardUnknown() {
	xxx_messageInfo_PrefixCount.DiscardUnknown(m)
}

var xxx_messageInfo_PrefixCount proto.InternalMessageInfo

func (m *PrefixCount) GetFamily() AddressFamily {
	if m != nil {
		return m.Family
	}
	return AddressFamily_UNKNOWN
}

func (m *PrefixCount) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PrefixCount) GetActive() int32 {
	if m != nil {
		return m.Active
	}
	return 0
}

// how many subnets of each mask is active
type Mask struct {
	AddressFamily        AddressFamily `protobuf:"varint,1,opt,name=address_family,json=addressFamily,proto3,enum=bgpinfo.AddressFamily" json:"address_family,omitempty"`
	Mask                 int32         `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Active               int32         `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Mask) Reset()         { *m = Mask{} }
func (m *Mask) String() string { return proto.CompactTextString(m) }
func (*Mask) ProtoMessage()    {}
func (*Mask) Descriptor() ([]byte, []int) {
	return fileDescriptor_bgpinfo_fb8abbf28ad092b4, []int{6}
}
func (m *Mask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mask.Unmarshal(m, b)
}
func (m *Mask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mask.Marshal(b, m, deterministic)
}
func (dst *Mask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mask.Merge(dst, src)
}
func (m *Mask) XXX_Size() int {
	return xxx_messageInfo_Mask.Size(m)
}
func (m *Mask) XXX_DiscardUnknown() {
	xxx_messageInfo_Mask.DiscardUnknown(m)
}

var xxx_messageInfo_Mask proto.InternalMessageInfo

func (m *Mask) GetAddressFamily() AddressFamily {
	if m != nil {
		return m.AddressFamily
	}
	return AddressFamily_UNKNOWN
}

func (m *Mask) GetMask() int32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *Mask) GetActive() int32 {
	if m != nil {
		return m.Active
	}
	return 0
}

func init() {
	proto.RegisterType((*Values)(nil), "bgpinfo.values")
	proto.RegisterType((*Result)(nil), "bgpinfo.result")
	proto.RegisterType((*AsCount)(nil), "bgpinfo.as_count")
	proto.RegisterType((*Memory)(nil), "bgpinfo.memory")
	proto.RegisterType((*PeerCount)(nil), "bgpinfo.peer_count")
	proto.RegisterType((*PrefixCount)(nil), "bgpinfo.prefix_count")
	proto.RegisterType((*Mask)(nil), "bgpinfo.mask")
	proto.RegisterEnum("bgpinfo.AddressFamily", AddressFamily_name, AddressFamily_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BgpInfoClient is the client API for BgpInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BgpInfoClient interface {
	AddLatest(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error)
}

type bgpInfoClient struct {
	cc *grpc.ClientConn
}

func NewBgpInfoClient(cc *grpc.ClientConn) BgpInfoClient {
	return &bgpInfoClient{cc}
}

func (c *bgpInfoClient) AddLatest(ctx context.Context, in *Values, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/bgpinfo.bgp_info/add_latest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpInfoServer is the server API for BgpInfo service.
type BgpInfoServer interface {
	AddLatest(context.Context, *Values) (*Result, error)
}

func RegisterBgpInfoServer(s *grpc.Server, srv BgpInfoServer) {
	s.RegisterService(&_BgpInfo_serviceDesc, srv)
}

func _BgpInfo_AddLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Values)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpInfoServer).AddLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bgpinfo.bgp_info/AddLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpInfoServer).AddLatest(ctx, req.(*Values))
	}
	return interceptor(ctx, in, info, handler)
}

var _BgpInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bgpinfo.bgp_info",
	HandlerType: (*BgpInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add_latest",
			Handler:    _BgpInfo_AddLatest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bgpinfo.proto",
}

func init() { proto.RegisterFile("bgpinfo.proto", fileDescriptor_bgpinfo_fb8abbf28ad092b4) }

var fileDescriptor_bgpinfo_fb8abbf28ad092b4 = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x35, 0x69, 0x93, 0xb4, 0xb7, 0x6e, 0xad, 0x57, 0xdd, 0x0d, 0x22, 0x4b, 0x89, 0x2f, 0x55,
	0xa4, 0x62, 0x2d, 0x45, 0x44, 0x7c, 0x11, 0x04, 0x71, 0xa9, 0x32, 0xb0, 0xfa, 0x18, 0xa6, 0xe9,
	0x6d, 0x09, 0x9b, 0x49, 0xc2, 0xcc, 0x64, 0x75, 0xff, 0xc3, 0x7f, 0xf1, 0xf7, 0xa4, 0x33, 0xd3,
	0x66, 0x57, 0x10, 0xd9, 0xb7, 0x39, 0xf7, 0xdc, 0x39, 0xe7, 0xce, 0x99, 0x19, 0x38, 0x5a, 0x6d,
	0xeb, 0xbc, 0xdc, 0x54, 0xd3, 0x5a, 0x56, 0xba, 0xc2, 0xc8, 0xc1, 0xe4, 0x97, 0x0f, 0xe1, 0x25,
	0x2f, 0x1a, 0x52, 0x88, 0xd0, 0xd5, 0xb9, 0xa0, 0xd8, 0x1b, 0x7b, 0x93, 0x0e, 0x33, 0x6b, 0x7c,
	0x03, 0x77, 0x6b, 0x49, 0x9b, 0xfc, 0x67, 0x9a, 0x55, 0x4d, 0xa9, 0x63, 0x7f, 0xec, 0x4d, 0x06,
	0xb3, 0x47, 0xd3, 0x56, 0xad, 0x25, 0xd9, 0xc0, 0xa2, 0x0f, 0x3b, 0x80, 0xcf, 0x20, 0xa8, 0x89,
	0xa4, 0x8a, 0x3b, 0xe3, 0xce, 0x64, 0x30, 0x7b, 0xd0, 0x6e, 0x21, 0x92, 0x6e, 0x83, 0xed, 0xc0,
	0x87, 0x10, 0xe8, 0x1f, 0x44, 0x3a, 0xee, 0x8e, 0xbd, 0x49, 0x8f, 0x59, 0x80, 0x13, 0x88, 0x04,
	0x89, 0xb4, 0x51, 0x14, 0x07, 0x46, 0xe2, 0xde, 0x41, 0x42, 0x90, 0xa8, 0xe4, 0x15, 0x0b, 0x05,
	0x89, 0x73, 0x45, 0xf8, 0x02, 0x7a, 0x5c, 0xb9, 0x01, 0x43, 0x33, 0xe0, 0xfd, 0x43, 0xeb, 0x9e,
	0x60, 0x11, 0x57, 0x76, 0xb0, 0xa7, 0x10, 0x08, 0xae, 0x2e, 0x54, 0x1c, 0x19, 0xd5, 0xa3, 0x56,
	0x95, 0xab, 0x0b, 0x66, 0xb9, 0x24, 0x81, 0x50, 0x92, 0x6a, 0x0a, 0x8d, 0x31, 0x44, 0xaa, 0xc9,
	0x32, 0x52, 0xca, 0x04, 0xd3, 0x63, 0x7b, 0x98, 0xbc, 0x6b, 0x6d, 0xf1, 0x04, 0x22, 0xae, 0xe6,
	0x69, 0x41, 0xa5, 0xe9, 0x0a, 0x58, 0xc8, 0xd5, 0xfc, 0x8c, 0x4a, 0x4b, 0x2c, 0x0c, 0xe1, 0xef,
	0x89, 0xc5, 0x19, 0x95, 0xc9, 0x6f, 0x0f, 0x42, 0x7b, 0x0e, 0x7c, 0x09, 0xe1, 0x86, 0x8b, 0xbc,
	0xb8, 0x32, 0x7b, 0x87, 0xb3, 0x93, 0x76, 0xfa, 0xf5, 0x5a, 0x92, 0x52, 0xa9, 0xa5, 0x99, 0x6b,
	0xc3, 0x63, 0x08, 0x35, 0x5f, 0x15, 0xa4, 0x8c, 0x66, 0x9f, 0x39, 0x64, 0x82, 0xac, 0x34, 0x2f,
	0xe2, 0x8e, 0x29, 0x5b, 0x80, 0x4f, 0xa0, 0x6f, 0x2e, 0x3d, 0xab, 0x0a, 0x65, 0x22, 0xee, 0xb3,
	0xb6, 0x80, 0xa7, 0x00, 0x5c, 0x6b, 0x99, 0xaf, 0x1a, 0x4d, 0x2a, 0x0e, 0x0c, 0x7d, 0xad, 0x82,
	0x23, 0xe8, 0xc8, 0x8a, 0x9b, 0x5c, 0xfb, 0x6c, 0xb7, 0x4c, 0x04, 0x40, 0x7b, 0x87, 0xb7, 0x1f,
	0xfe, 0x14, 0x20, 0xab, 0xca, 0x4d, 0xbe, 0x6d, 0x24, 0xad, 0x5d, 0x28, 0xd7, 0x2a, 0x38, 0x04,
	0xbf, 0xa9, 0xcd, 0x09, 0x02, 0xe6, 0x37, 0x75, 0x22, 0x6e, 0x3e, 0xc1, 0xdb, 0x1b, 0x1e, 0x52,
	0xb1, 0x5e, 0x2e, 0x95, 0x63, 0x08, 0x79, 0xa6, 0xf3, 0x4b, 0x72, 0x56, 0x0e, 0x25, 0x12, 0xba,
	0xbb, 0x27, 0x80, 0xef, 0x61, 0x78, 0x53, 0xef, 0x7f, 0x76, 0x47, 0x0e, 0x7f, 0xb4, 0xae, 0x68,
	0x75, 0x9c, 0xa9, 0xd5, 0xfc, 0x87, 0xe7, 0xf3, 0x57, 0x7f, 0x7b, 0xe1, 0x00, 0xa2, 0xf3, 0xe5,
	0xe7, 0xe5, 0x97, 0xef, 0xcb, 0xd1, 0x1d, 0xec, 0x41, 0xf7, 0xd3, 0xd7, 0x6f, 0x8b, 0x91, 0xe7,
	0x56, 0xf3, 0x91, 0x3f, 0x7b, 0x0b, 0xbd, 0xd5, 0xb6, 0x4e, 0x77, 0x83, 0xe0, 0x14, 0x80, 0xaf,
	0xd7, 0x69, 0xc1, 0x35, 0x29, 0x8d, 0xed, 0x37, 0xb1, 0xff, 0xfa, 0x71, 0x5b, 0xb0, 0x4f, 0x7a,
	0x15, 0x9a, 0xdb, 0x7f, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0xe4, 0xa6, 0x30, 0x86, 0x14, 0x04,
	0x00, 0x00,
}
