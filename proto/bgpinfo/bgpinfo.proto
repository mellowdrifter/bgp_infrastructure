syntax = "proto3";

package bgpinfo;

service bgp_info {
    rpc add_latest(values) returns (result);
    rpc get_prefix_count(empty) returns (prefix_count_response);
    rpc update_tweet_bit(timestamp) returns (result);
    rpc get_pie_subnets(empty) returns (pie_subnets_response);
    rpc get_movement_totals(movement_request) returns (movement_totals_response);
    rpc get_pie_rpki(empty) returns (roas);
}

message values {
    // Values holds the data required to update the database every five minutes.
    uint64 time = 1;
    prefix_count prefix_count = 2;
    peer_count peers = 3;
    as_count as_count = 4;
    masks masks = 5;
    large_community large_community = 6;
    roas roas = 7;
}

message empty {
    // Sometimes we just need to request data. No inputs required.
}

message prefix_count_response {
    // Used to formulate a tweet every six hours with
    // the current status, plus compared to both 6 hours ago
    // and a week ago. Contains count of /24 and /48.
    uint32 active_4 = 1;
    uint32 active_6 = 2;
    uint32 sixhoursv4 = 3;
    uint32 sixhoursv6 = 4;
    uint32 weekagov4 = 5;
    uint32 weekagov6 = 6;
    uint32 slash24 = 7;
    uint32 slash48 = 8;
    uint64 time = 9;
}

message pie_subnets_response { 
    // Used to create a pie graph showing the percentage
    // that each subnet is using from the complete total.
    uint32 v4_total = 1;
    uint32 v6_total = 2;
    masks masks = 3;
    uint64 time = 4;
}

message movement_totals_response {
    // Used to create a graph showing table movement for the
    // given time period.
    repeated v4v6time values = 1;
}

message v4v6time {
    uint32 v4_values = 1;
    uint32 v6_values = 2;
    uint64 time = 3;
}

message timestamp {
    uint64 time = 1;
}

message result {
    // Bool stating whether the update was a success or not.
    // Ragerdless of result, we can check that via the returned result.
    bool success = 1;
    string result = 2;
}

message as_count {
    // as_count will hold the total amount of unique ASs.
    // Total number of unique IPv4 source AS numbers.
    uint32 as4 = 1;
    // Total number of unique IPv6 source AS numbers.
    uint32 as6 = 2;
    // Total unique source AS numbers
    uint32 as10 = 3;
    // IPv4-only source AS.
    uint32 as4_only = 4;
    // IPv6-only source AS.
    uint32 as6_only = 5;
    // Unique AS originating both IPv4 and IPv6
    uint32 as_both = 6;
}

message movement_request {
    // graph requests determined by what time period
    // I am graphing for.
    enum TimePeriod {
        WEEK = 0;
        MONTH = 1;
        SIXMONTH = 2;
        ANNUAL = 3;
    }
    TimePeriod period = 1;
}

message peer_count {
    // how many peers do I have
    uint32 peer_count_4 = 1;
    uint32 peer_up_4 = 2;
    uint32 peer_count_6 = 3;
    uint32 peer_up_6 = 4;
}

enum address_family {
    IPV6 = 0;
    IPV4 = 1;
}

message prefix_count {
    // prefix counts. Most used info
    uint32 total_4 = 1;
    uint32 active_4 = 2;
    uint32 total_6 = 3;
    uint32 active_6 = 4;
    uint64 time = 5;
}

message masks {
    // how many subnets of each mask is active
    uint32 v4_08 = 1;
    uint32 v4_09 = 2;
    uint32 v4_10 = 3;	
    uint32 v4_11 = 4;
    uint32 v4_12 = 5;
    uint32 v4_13 = 6;
    uint32 v4_14 = 7;	
    uint32 v4_15 = 8;	
    uint32 v4_16 = 9;	
    uint32 v4_17 = 10;	
    uint32 v4_18 = 11;	
    uint32 v4_19 = 12;	
    uint32 v4_20 = 13;	
    uint32 v4_21 = 14;	
    uint32 v4_22 = 15;	
    uint32 v4_23 = 16;	
    uint32 v4_24 = 17;	
    uint32 v6_08 = 18;	
    uint32 v6_09 = 19;	
    uint32 v6_10 = 20;	
    uint32 v6_11 = 21;	
    uint32 v6_12 = 22;	
    uint32 v6_13 = 23;	
    uint32 v6_14 = 24;	
    uint32 v6_15 = 25;	
    uint32 v6_16 = 26;	
    uint32 v6_17 = 27;	
    uint32 v6_18 = 28;	
    uint32 v6_19 = 29;	
    uint32 v6_20 = 30;	
    uint32 v6_21 = 31;	
    uint32 v6_22 = 32;	
    uint32 v6_23 = 33;	
    uint32 v6_24 = 34;	
    uint32 v6_25 = 35;	
    uint32 v6_26 = 36;	
    uint32 v6_27 = 37;	
    uint32 v6_28 = 38;	
    uint32 v6_29 = 39;	
    uint32 v6_30 = 40;	
    uint32 v6_31 = 41;	
    uint32 v6_32 = 42;	
    uint32 v6_33 = 43;	
    uint32 v6_34 = 44;	
    uint32 v6_35 = 45;	
    uint32 v6_36 = 46;	
    uint32 v6_37 = 47;	
    uint32 v6_38 = 48;	
    uint32 v6_39 = 49;	
    uint32 v6_40 = 50;	
    uint32 v6_41 = 51;	
    uint32 v6_42 = 52;	
    uint32 v6_43 = 53;	
    uint32 v6_44 = 54;	
    uint32 v6_45 = 55;	
    uint32 v6_46 = 56;	
    uint32 v6_47 = 57;	
    uint32 v6_48 = 58;	
}

message response {
    bool status = 1;
    uint32 priority = 2;
}

message large_community {
    // Large Community count (RFC 8092)
    uint32 c4 = 1;
    uint32 c6 = 2;
}

message roas {
    // RPKI Route Origin Authorization
    uint32 v4_valid = 1;
    uint32 v4_invalid = 2;
    uint32 v4_unknown = 3;
    uint32 v6_valid = 4;
    uint32 v6_invalid = 5;
    uint32 v6_unknown = 6;
}
