syntax = "proto3";

package bgpinfo;

service bgp_info {
    rpc add_latest(values) returns (result);
    rpc alive(empty) returns (response);
    rpc is_primary(empty) returns (active);
    rpc get_prefix_count(empty) returns (counts);
    rpc get_graph_data(length) returns (graph_data);
}

message values {
    // UTC in UNIX time
    uint64 time = 1;
    prefix_count prefix_count = 2;
    peer_count peers = 3;
    repeated memory mem_use = 4;
    as_count as_count = 5;
    masks masks = 6;
    large_community large_community = 7;
}

message result {
    bool success = 1;
    string result = 2;
}

message length {
    time_length time = 1;
}

enum time_length {
    WEEK = 0;
    MONTH = 1;
    SIXMONTH = 2;
    YEAR = 3;
}

// as_count will hold the total amount of unique ASs.
message as_count {
    // Total number of unique IPv4 source AS numbers.
    uint32 as4 = 1;
    // Total number of unique IPv6 source AS numbers.
    uint32 as6 = 2;
    // Total unique source AS numbers
    uint32 as10 = 3;
    // IPv4-only source AS.
    uint32 as4_only = 4;
    // IPv6-only source AS.
    uint32 as6_only = 5;
    // Unique AS originating both IPv4 and IPv6
    uint32 as_both = 6;

}

// total memory used by the daemon
message memory {
    address_family family = 1;
    memstats memstats = 2;
}

message memstats {
    string tables = 1;
    string total = 2;
    string protocols = 3;
    string attributes = 4;
    string roa = 5;
}

// how many peers do I have
message peer_count {
    uint32 peer_count_4 = 1;
    uint32 peer_up_4 = 2;
    uint32 peer_count_6 = 3;
    uint32 peer_up_6 = 4;
}

enum address_family {
    IPV6 = 0;
    IPV4 = 1;
}

// prefix counts. Most used info
message prefix_count {
    uint32 total_4 = 1;
    uint32 active_4 = 2;
    uint32 total_6 = 3;
    uint32 active_6 = 4;
    uint64 time = 5;
}

// how many subnets of each mask is active
message masks {
    uint32 v4_08 = 1;
    uint32 v4_09 = 2;
    uint32 v4_10 = 3;
    uint32 v4_11 = 4;
    uint32 v4_12 = 5;
    uint32 v4_13 = 6;
    uint32 v4_14 = 7;
    uint32 v4_15 = 8;
    uint32 v4_16 = 9;
    uint32 v4_17 = 10;
    uint32 v4_18 = 11;
    uint32 v4_19 = 12;
    uint32 v4_20 = 13;
    uint32 v4_21 = 14;
    uint32 v4_22 = 15;
    uint32 v4_23 = 16;
    uint32 v4_24 = 17;
    uint32 v6_08 = 18;
    uint32 v6_09 = 19;
    uint32 v6_10 = 20;
    uint32 v6_11 = 21;
    uint32 v6_12 = 22;
    uint32 v6_13 = 23;
    uint32 v6_14 = 24;
    uint32 v6_15 = 25;
    uint32 v6_16 = 26;
    uint32 v6_17 = 27;
    uint32 v6_18 = 28;
    uint32 v6_19 = 29;
    uint32 v6_20 = 30;
    uint32 v6_21 = 31;
    uint32 v6_22 = 32;
    uint32 v6_23 = 33;
    uint32 v6_24 = 34;
    uint32 v6_25 = 35;
    uint32 v6_26 = 36;
    uint32 v6_27 = 37;
    uint32 v6_28 = 38;
    uint32 v6_29 = 39;
    uint32 v6_30 = 40;
    uint32 v6_31 = 41;
    uint32 v6_32 = 42;
    uint32 v6_33 = 43;
    uint32 v6_34 = 44;
    uint32 v6_35 = 45;
    uint32 v6_36 = 46;
    uint32 v6_37 = 47;
    uint32 v6_38 = 48;
    uint32 v6_39 = 49;
    uint32 v6_40 = 50;
    uint32 v6_41 = 51;
    uint32 v6_42 = 52;
    uint32 v6_43 = 53;
    uint32 v6_44 = 54;
    uint32 v6_45 = 55;
    uint32 v6_46 = 56;
    uint32 v6_47 = 57;
    uint32 v6_48 = 58;
}

// Large Community count (RFC 8092)
message large_community {
    uint32 c4 = 1;
    uint32 c6 = 2;
}

message four_byte_asn {
    uint32 c4 = 1;
    uint32 c6 = 2;
}

// RPKI (RFC 6480)
message roa {
    uint32 roa_valid = 1;
    uint32 roa_invalid = 2;
}

message response {
    bool status = 1;
    uint32 priority = 2;
}

message empty {}

message active{
    bool primary = 1;
}

// get_count is used to return all the required information to
// send the six-hourly tweet
message counts {
    uint64 time = 1;
    uint32 currentv4 = 2;
    uint32 currentv6 = 3;
    uint32 sixhoursv4 = 4;
    uint32 sixhoursv6 = 5;
    uint32 weekagov4 = 6;
    uint32 weekagov6 = 7;
}

message time_v4_v6 {
    uint64 time = 1;
    uint32 v4 = 2;
    uint32 v6 = 3;
}

message graph_data {
    repeated time_v4_v6 tick = 1;
}
