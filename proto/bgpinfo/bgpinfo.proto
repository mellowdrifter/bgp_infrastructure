syntax = "proto3";

package bgpinfo;

service bgp_info {
    rpc add_latest(values) returns (result);
    rpc get_tweet_data(tweet_type) returns (result);
}

message values {
    // UTC in UNIX time
    uint64 time = 1;
    repeated prefix_count prefix_count = 2;
    repeated peer_count peers = 3;
    repeated memory mem_use = 4;
    as_count as_count = 5;
    repeated mask masks = 6;
    large_community large_community = 7;
}

message result {
    bool success = 1;
}

message tweet_type {
    enum action {
        UNKNOWN = 0;
        QDS = 1;
        WEEKLY = 2;
        MONTHLY = 3;
        HALFYEAR = 4;
        ANNUAL = 5;
        APRILFOOL = 6;
        DISTRIBUTION = 7;
    }
}

// as_count will hold the total amount of unique ASs.
message as_count {
    // Total number of unique IPv4 source AS numbers.
    uint32 as4 = 1;
    // Total number of unique IPv6 source AS numbers.
    uint32 as6 = 2;
    // Total unique source AS numbers
    uint32 as10 = 3;
    // IPv4-only source AS.
    uint32 as4_only = 4;
    // IPv6-only source AS.
    uint32 as6_only = 5;
    // Unique AS originating both IPv4 and IPv6
    uint32 as_both = 6;

}

// total memory used by the daemon
message memory {
    address_family family = 1;
    repeated memstats memstats = 2;
}

message memstats {
    string tables = 1;
    string total = 2;
    string protocols = 3;
    string attributes = 4;
    string roa = 5;
}

// how many peers do I have
message peer_count {
    uint32 peer_count_4 = 1;
    uint32 peer_up_4 = 2;
    uint32 peer_count_6 = 3;
    uint32 peer_up_6 = 4;
}

enum address_family {
    UNKNOWN = 0;
    IPV6 = 1;
    IPV4 = 2;
}

// prefix counts. Most used info
message prefix_count {
    uint32 total_4 = 1;
    uint32 active_4 = 2;
    uint32 total_6 = 3;
    uint32 active_6 = 4;
}

// how many subnets of each mask is active
message mask {
    address_family address_family = 1;
    repeated masks masks = 2;
}

message masks {
    uint32 mask = 1;
    uint32 total = 2;
}

// Large Community count (RFC 8092)
message large_community {
    uint32 c4 = 1;
    uint32 c6 = 2;
}
